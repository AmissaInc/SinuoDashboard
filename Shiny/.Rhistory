`Content-Type` = "application/json",
Accept = 'application/json'
),
body = rjson::toJSON(broker_login_body),
httr::content_type_json(),
verbose())
broker_login_body = rjson::toJSON('{
"username": "testuser1",
"password": "password1",
"app_token": "Am!ssa1"
}')
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
add_headers(
`Content-Type` = "application/json",
Accept = 'application/json'
),
body = rjson::toJSON(broker_login_body),
httr::content_type_json(),
verbose())
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
add_headers(
`Content-Type` = "application/json",
Accept = 'application/json'
),
body = broker_login_body,
httr::content_type_json(),
verbose())
broker_login_body = list(
username = username,
password = password,
app_token = app_token
)
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
add_headers(
`Content-Type` = "application/json",
Accept = 'application/json'
),
body = rjson::toJSON(broker_login_body),
httr::content_type_json(),
verbose())
broker_login_body = list(
username = username,
password = password,
app_token = app_token
)
rjson::toJSON(broker_login_body)
httr::content_type_json()
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = rjson::toJSON(broker_login_body),
httr::content_type_json(),
encode = "json",
verbose())
broker_login_body = [list(
username = username,
password = password,
app_token = app_token
)]
broker_login_body = c(list(
username = username,
password = password,
app_token = app_token
))
View(broker_login_body)
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = rjson::toJSON(broker_login_body),
httr::content_type_json(),
encode = "json",
verbose())
broker_login_body = c(list(
username = username,
password = password,
app_token = app_token
))
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = rjson::toJSON(broker_login_body),
httr::content_type_json(),
encode = "json",
verbose())
broker_login_body = '{
"username": "testuser1",
"password": "password1",
"app_token": "Am!ssa1"
}'
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = rjson::toJSON(broker_login_body),
httr::content_type_json(),
encode = "json",
verbose())
broker_login_body = c(list(
username = username,
password = password,
app_token = app_token
))
rjson::toJSON(broker_login_body)
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = rjson::toJSON(broker_login_body, auto_unbox=TRUE),
httr::content_type_json(),
encode = "json",
verbose())
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = toJSON(broker_login_body, auto_unbox=TRUE),
httr::content_type_json(),
encode = "json",
verbose())
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = jsonlite::toJSON(broker_login_body, auto_unbox=TRUE),
httr::content_type_json(),
encode = "json",
verbose())
jsonlite::toJSON(broker_login_body, auto_unbox=TRUE)
broker_login_body = c(list(
username = username,
password = password,
app_token = app_token
))
jsonlite::toJSON(broker_login_body, auto_unbox=TRUE)
broker_login_body = '{
"username": "testuser1",
"password": "password1",
"app_token": "Am!ssa1"
}'
jsonlite::toJSON(broker_login_body, auto_unbox=TRUE)
broker_login_body = c(list(
username = username,
password = password,
app_token = app_token
))
jsonlite::toJSON(broker_login_body, auto_unbox=TRUE)
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = jsonlite::toJSON(broker_login_body, auto_unbox=TRUE),
httr::content_type_json(),
encode = "json",
verbose())
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = jsonlite::toJSON(broker_login_body, auto_unbox=TRUE),
httr::content_type_json(),
# encode = "json",
verbose())
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = jsonlite::toJSON(broker_login_body, auto_unbox=TRUE),
httr::content_type_json(),
# encode = "json",
verbose())
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = jsonlite::toJSON(broker_login_body, auto_unbox=TRUE),
httr::content_type_json(),
encode = "",
verbose())
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = rjson::toJSON(broker_login_body),
httr::content_type_json(),
encode = "",
verbose())
install.packages("cirl")
install.packages("curl")
install.packages("curl")
req <- curl_fetch_memory(broker_api_login_url)
library(curl)
req <- curl_fetch_memory(broker_api_login_url)
View(req)
h <- new_handle()
handle_setheaders(h, "Content-Type" = "application/json")
req <- curl_fetch_memory(broker_api_login_url, handle = h)
rjson::toJSON(broker_login_body)
handle_data(h, jsonlite::toJSON(broker_login_body))
library(httr)
username = "testuser1"
password = "password1"
app_token <- "Am!ssa1"
broker_api_base_url <- "https://sinuobrokeraf.azurewebsites.net/"
broker_af_code = "OlSH9OYxaTamYDu3cArtapVGTLd11aLNK3XHtpaY/kaTL3Pspb4IZQ=="
broker_api_login_path = "api/Login"
broker_api_login_url <- paste0(broker_api_base_url, "Login", "?code=", broker_af_code)
broker_api_login_url == "https://sinuobrokeraf.azurewebsites.net/api/Login?code=OlSH9OYxaTamYDu3cArtapVGTLd11aLNK3XHtpaY/kaTL3Pspb4IZQ%3D%3D"
broker_login_body = list(
username = username,
password = password,
app_token = app_token
)
# broker_login_body = '{
#   "username": "testuser1",
#   "password": "password1",
#   "app_token": "Am!ssa1"
# }'
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
query = list(
code = broker_af_code
),
body = broker_login_body,
httr::content_type_json(),
encode = "",
verbose())
broker_api_base_url <- "http://localhost:8080/"
broker_api_login_path = "api/Login"
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
# query = list(
#   code = broker_af_code
# ),
body = broker_login_body,
httr::content_type_json(),
encode = "",
verbose())
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
# query = list(
#   code = broker_af_code
# ),
body = broker_login_body,
httr::content_type_json(),
encode = "json",
verbose())
GET
httr:::request_build
httr:::request_perform
GET
httr:::request_build
jsonlite::fromJSON(rawToChar(broker_login_response$content))
View(broker_login_response)
broker_login_response[["content"]]
username = "testuser1"
password = "password1"
app_token <- "Am!ssa1"
broker_api_base_url <- "https://sinuobrokeraf.azurewebsites.net/"
broker_api_base_url <- "http://localhost:8080/"
broker_af_code = "OlSH9OYxaTamYDu3cArtapVGTLd11aLNK3XHtpaY/kaTL3Pspb4IZQ=="
broker_api_login_path = "api/Login"
broker_api_login_url <- paste0(broker_api_base_url, "Login", "?code=", broker_af_code)
broker_api_login_url == "https://sinuobrokeraf.azurewebsites.net/api/Login?code=OlSH9OYxaTamYDu3cArtapVGTLd11aLNK3XHtpaY/kaTL3Pspb4IZQ%3D%3D"
broker_login_body = list(
username = username,
password = password,
app_token = app_token
)
# broker_login_body = '{
#   "username": "testuser1",
#   "password": "password1",
#   "app_token": "Am!ssa1"
# }'
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
# query = list(
#   code = broker_af_code
# ),
add_headers(
body = broker_login_body
)
body = broker_login_body,
httr::content_type_json(),
encode = "json",
verbose())
broker_login_response
broker_api_base_url <- "http://localhost:8080/"
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
# query = list(
#   code = broker_af_code
# ),
add_headers(
body = broker_login_body
)
body = broker_login_body,
httr::content_type_json(),
encode = "json",
verbose())
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
# query = list(
#   code = broker_af_code
# ),
body = broker_login_body,
httr::content_type_json(),
encode = "json",
verbose())
jsonlite::fromJSON(rawToChar(broker_login_response$content))
broker_login_response <- GET(url = broker_api_base_url,
path = broker_api_login_path,
# query = list(
#   code = broker_af_code
# ),
body = broker_login_body,
httr::content_type_json(),
type = "basic",
encode = "json",
verbose())
broker_login_response <- POST(url = broker_api_base_url,
path = broker_api_login_path,
# query = list(
#   code = broker_af_code
# ),
body = broker_login_body,
httr::content_type_json(),
type = "basic",
encode = "json",
verbose())
broker_login_response <- POST(url = broker_api_base_url,
path = broker_api_login_path,
# query = list(
#   code = broker_af_code
# ),
body = broker_login_body,
httr::content_type_json(),
type = "basic",
encode = "json",
verbose())
jsonlite::fromJSON(rawToChar(broker_login_response$content))
broker_login_response <- POST(url = broker_api_base_url,
path = broker_api_login_path,
# query = list(
#   code = broker_af_code
# ),
body = broker_login_body,
httr::content_type_json(),
encode = "json",
verbose())
jsonlite::fromJSON(rawToChar(broker_login_response$content))
user_token <- jsonlite::fromJSON(rawToChar(broker_login_response$content))$user_token
broker_api_gdr_path = "api/GetDeviceReads"
broker_api_base_url <- "https://sinuobrokeraf.azurewebsites.net/"
## GetDeviceReads
broker_gdr_body = list(
device_id = device_id,
username = input$username,
user_token = user_token,
)
broker_login_response <- POST(url = broker_api_base_url,
path = broker_api_login_path
query = list(code = broker_af_code),
body = broker_login_body,
httr::content_type_json(),
encode = "json")
broker_login_response <- POST(url = broker_api_base_url,
path = broker_api_login_path,
query = list(code = broker_af_code),
body = broker_login_body,
httr::content_type_json(),
encode = "json")
user_token <- jsonlite::fromJSON(rawToChar(broker_login_response$content))$user_token
device_id <- jsonlite::fromJSON(rawToChar(broker_login_response$content))$device_id
## GetDeviceReads
broker_gdr_body = list(
device_id = device_id,
username = input$username,
user_token = user_token,
)
## GetDeviceReads
broker_gdr_body = list(
device_id = device_id,
username = username,
user_token = user_token,
)
## GetDeviceReads
broker_gdr_body = list(
device_id = device_id,
username = username,
user_token = user_token
)
broker_gdr_response <- POST(url = broker_api_base_url,
path = broker_api_gdr_path,
query = list(code = broker_af_code),
body = broker_gdr_body,
httr::content_type_json(),
encode = "json")
View(broker_gdr_response)
jsonlite::fromJSON(rawToChar(broker_gdr_response$content))
broker_gdr_response <- POST(url = broker_api_base_url,
path = broker_api_gdr_path,
query = list(code = broker_af_code),
body = broker_gdr_body,
httr::content_type_json(),
encode = "json", verbose())
jsonlite::fromJSON(rawToChar(broker_gdr_response$content))
View(broker_gdr_response)
broker_gdr_response[["content"]]
rawToChar(broker_gdr_response[["content"]])
broker_api_base_url
broker_api_gdr_path
broker_af_code
broker_login_response <- POST(url = broker_api_base_url,
path = broker_api_login_path,
query = list(code = broker_af_code),
body = broker_login_body,
httr::content_type_json(),
encode = "json")
user_token <- jsonlite::fromJSON(rawToChar(broker_login_response$content))$user_token
device_id <- jsonlite::fromJSON(rawToChar(broker_login_response$content))$device_id
broker_gdr_body
## GetDeviceReads
broker_gdr_body = list(
device_id = "6F17A220-9377-4742-B310-67DAC21E060F", #device_id,
username = username,
user_token = user_token
)
broker_gdr_response <- POST(url = broker_api_base_url,
path = broker_api_gdr_path,
query = list(code = broker_af_code),
body = broker_gdr_body,
httr::content_type_json(),
encode = "json", verbose())
jsonlite::fromJSON(rawToChar(broker_gdr_response$content))
as.data.frame(jsonlite::fromJSON(rawToChar(broker_gdr_response$content)))
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- as.data.frame(jsonlite::fromJSON(rawToChar(broker_gdr_response$content)))
View(data)
colnames(data)
device_reads_pretty <- data %>%
select(timestamp,
latitude,
longitude,
altitude,
gravity,
rotation,
userAccel,
step,
heartRate,
motionActivity) %>%
mutate(timestamp = as.character(timestamp))
library(dplyr)
device_reads_pretty <- data %>%
select(timestamp,
latitude,
longitude,
altitude,
gravity,
rotation,
userAccel,
step,
heartRate,
motionActivity) %>%
mutate(timestamp = as.character(timestamp))
map_fig <- leaflet(device_reads_pretty) %>%
addTiles() %>%
addCircleMarkers()
install.packages("leaflet")
install.packages("leaflet")
map_fig <- leaflet(device_reads_pretty) %>%
addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
library(leaflet)
library(dplyr)
map_fig <- leaflet(device_reads_pretty) %>%
addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
map_fig
shiny::runApp()
runApp()
runApp()
